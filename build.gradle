buildscript {
    dependencies {
        classpath "de.guntram.mcmod:crowdin-translate:${project.crowdin_translate_version}"
    }
    repositories {
        maven {
            name = "CrowdinTranslate"
            url = "https://minecraft.guntram.de/maven/"
        }
    }
}

plugins {
    id "fabric-loom" version "1.4-SNAPSHOT"
    id "org.ajoberstar.grgit" version "4.1.0"
}

apply plugin: "de.guntram.mcmod.crowdin-translate"
crowdintranslate.crowdinProjectname = "sync-fabric"
crowdintranslate.minecraftProjectName = "sync"
crowdintranslate.verbose = true

String minecraftDependencyVersion = project.minecraft_version.split(/[+ -]/)[0]

group = project.maven_group
version = "${project.mod_version}${getVersionMetadata()}" as Object

base {
    archivesName = project.archives_base_name + "-mc" + minecraftDependencyVersion
}

loom {
    accessWidenerPath = file("src/main/resources/sync.accesswidener")
}

repositories {
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = "https://maven.ladysnake.org/releases"
    }
    maven {
        name = "Cloth Config"
        url = "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel.cloth"
        }
    }
    maven {
        name = "Nexus OSS Repository"
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "willBlRepositoryReleases"
        url = "https://maven.willbl.dev/releases"
    }
    maven {
        name = "CrowdinTranslate"
        url = "https://minecraft.guntram.de/maven/"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
        content {
            includeGroupByRegex "(io|com)\\.github\\..*"
        }
    }
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    maven {
        url = "https://maven.cafeteria.dev"
        content {
            includeGroup "net.adriantodt.fabricmc"
        }
    }
    maven {
        name = "Appleskin"
        url = "https://maven.ryanliptak.com/"
        content {
            includeGroup 'squeek.appleskin'
        }
    }
    maven {
        name = "Jared"
        url 'https://maven.blamejared.com'
        content {
            includeGroup "vazkii.patchouli"
        }
    }
    maven {
        name = "GeckoLib"
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven"
        content {
            includeGroup "software.bernie.geckolib"
        }
    }
}

// To change the versions see the gradle.properties file
dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation(include("de.guntram.mcmod:crowdin-translate:${project.crowdin_translate_version}"))
    modImplementation(include("teamreborn:energy:${project.tr_energy_version}"))
    modImplementation(include("io.github.ladysnake:satin:${project.satin_version}"))
    modImplementation(include("maven.modrinth:smart-recipes:${project.smartrecipes_version}"))

    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"
    modImplementation "io.github.ladysnake:requiem-api:${project.requiem_version}"
    modImplementation "com.github.apace100:origins-fabric:${project.origins_version}"
    modImplementation "com.github.apace100:apoli:2.3.3"
    modImplementation "com.github.apace100:calio:${project.calio_version}"
    modCompileOnly "com.williambl.haema:haema:${project.haema_version}"
    compileOnly("com.demonwav.mcdev:annotations:1.0")
}

processResources {
    filesMatching("fabric.mod.json") {
        expand([
            "version": version,
            "minecraft": ">=${minecraftDependencyVersion}",
            "smart_recipes": project.smartrecipes_version,
            "satin_api": project.satin_version,
            "crowdin_translate": project.crowdin_translate_version,
            "team_reborn_energy": project.tr_energy_version,
            "cloth_config": ">=${project.cloth_version}",
            "modmenu": ">=${project.modmenu_version}",
            "trinkets": ">=${project.trinkets_version}",
            "requiem": ">=${project.requiem_version}",
            "origins": ">=${project.origins_version}",
            "haema": ">=${project.haema_version}",
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(17)
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from "LICENSE.md"
}

@SuppressWarnings("GrMethodMayBeStatic") // It cannot
String getVersionMetadata() {
    // Release builds don't require additional metadata
    String ref = System.getenv("GITHUB_REF")
    if (ref != null && ref.startsWith("refs/tags/")) {
        return ""
    }

    // GitHub CI builds only
    String build_id = System.getenv("GITHUB_RUN_NUMBER")
    if (build_id != null && build_id.length() != 0) {
        return "+build.${build_id}"
    }

    if (grgit != null && grgit.head() != null) {
        def id = grgit.head().abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "+rev.${id}"
    }

    // No tracking information could be found about the build
    return "+unknown"
}
